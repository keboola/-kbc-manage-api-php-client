FORMAT: 1A
HOST: https://connection.keboola.com/

# Keboola Connection Management API


Keboola Management API covers all tasks required for managing projects and also covers some super admin features for controlling and monitoring Keboola Connection.

## Projects management
 * Create, modify and delete maintainers, organizations and projects
 * Move projects between organizations
 * Define project limits
 * Provisioning of Redshift and other storage backends
 * Access to project management activity log

## Projects Monitoring
 * Monitoring of projects over organizations and maintainers

## Super user control and monitoring

 * UI release and deployment
 * Components management
 * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)
 * Final project delete
 * Workers start/shutdown etc.

## Authentication
The API supports authentication by personal access token which can be retrieved in [Account settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection.
Access token is tied to administrator and it's permissions are derived from it's permissions. When the administrator is disabled or deleted all it's token become invalid too.

`$ curl -H "X-KBC-ManageApiToken: USER_TOKEN" https://connection.keboola.com/management/tokens/verify`

There are also tokens issued for components. Read more in Components Management.

## Token types
There are following types of tokens


| Name | Tied to User | Token string is available only on create | Description  |
| ------------- | ------------- | ------------------- | ----- |
| user | Yes | No |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for token user.|
| component | No | Yes | can manage one specified component *Not yet implemented.* |
| super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |


## Token Verification [GET /manage/tokens/verify]

+ Request
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    {
        "id": 234,
        "user" : {
            "id": 416,
            "name": "Martin Halamíček"
        },
        "created": "2014-11-11T08:40:51.620Z",
        "type": "admin",
        "scopes": [],
        "access": {
            "projects": [234, 23, 234],
            "organizations": [23],
            "maintainers": [1]
        }
    }
    ```

# Group Maintainers

## Maintainers [/manage/maintainers]

### Create a Maintainer [POST]
Create a new maintainer. User associated to token will become a admin of maintainer.

+ Attributes
    + name:Example (required) - Maintainer name


+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token


+ Response 201

    [Maintainer][]


### List maintainers [GET]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```
    [
        {
            "id": 123,
            "name": "Keboola CZ",
            "created": "2014-11-11T08:40:51.620Z",
            "defaultConnectionMysqlId": 234,
            "defaultConnectionRedshiftId": 232,
            "defaultConnectionSnowflakeId": 242,
            "organizations": [
                {
                    "id": 234,
                    "name": "Development",
                    "projects": []
                },
                {
                    "id": 235,
                    "name": "POC",
                    "projects": []
                }
            ]
        },
        {
            "id": 124,
            "name": "abc",
            "crated": "2014-11-11T08:40:51.620Z",
            "defaultConnectionMysqlId": 234,
            "defaultConnectionRedshiftId": 232,
            "defaultConnectionSnowflakeId": 242,
            "organizations": [
                {
                    "id": 234,
                    "name": "Development",
                    "projects": []
                },
                {
                    "id": 235,
                    "name": "POC",
                    "projects": []
                }
            ]
        }
    ]
    ```

## Maintainer [/manage/maintainers/{maintainer_id}]

A Maintainer object has the following attributes:

+ name
+ created
+ organizations - An array of Organizations objects.

+ Parameters
    + maintainer_id: 1 (required, integer)

+ Model (application/json)

    ```js
    {
        "id": 123,
        "crated": "2014-11-11T08:40:51.620Z",
        "url": "/questions/1",
        "defaultConnectionMysqlId": 234,
        "defaultConnectionRedshiftId": 232,
        "defaultConnectionSnowflakeId": 242,
        "zendeskUrl": "https://some.url.com",
        "organizations": [
            {
                "id": 234,
                "name": "Development",
                "projects": []
            },
            {
                "id": 235,
                "name": "POC",
                "projects": []
            }
        ]
    }
    ```
### Retrieve a maintainer [GET]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200
    [Maintainer][]

### Update a maintainer [PATCH]
Partial update of maintainer.

+ Attributes
    + name:Example - Maintainer name
    + defaultConnectionRedshiftId:234 (optional) - Default Redshift Connection Id
    + defaultConnectionSnowflakeId:324 (optional) - Default Snowflake Connection Id
    + zendeskUrl:https://keboola.zendesk.com (optional)

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token



+ Response 200
    [Maintainer][]

### Delete a Maintainer  [DELETE]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204

## Maintainer members [/manage/maintainers/{maintainer_id}/users]

+ Parameters
    + maintainer_id: 1 (required, number) - ID of the maintainer.

### List members [GET]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    [
        {
            "id": 23423,
            "name": "Martin Halamicek",
            "email": "martin@keboola.com"
        }
    ]
    ```

## Add a user [POST]

Either `id` or `email` of member must be set. If member is not found by email, account is created and invitation is sent.

+ Attributes
    + id:7234 - User id
    + email:martin@keboola.com - User email


+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token


+ Response 204

## Remove a user [DELETE /manage/maintainers/{maintainer_id}/users/{user_id}]

+ Parameters
    + maintainer_id: 1 (required, number) - ID of the maintainer.
    + user_id: 1 (required, int) - Member id

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204



# Group Organizations

## Organization [/manage/organizations/{organization_id}]

A Organization object has the following attributes:

+ name
+ created
+ allowAutoJoin
+ projects - An array of Projects objects.

+ Parameters
    + organization_id: 1 (required, number) - ID of the Question in form of an integer

+ Model (application/json)

    ```js
    {
        "id": 123,
        "name": "sample org",
        "created": "2014-11-11T08:40:51.620Z",
        "projects": [
            {
                "id": 123,
                "name": "Demo",
                "created": "2014-11-11T08:40:51.620Z"
            }
        ]
    }
    ```
### Retrieve a Organization [GET]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200

    ```js
    {
        "id": 123,
        "name": "sample org",
        "created": "2015-10-02T11:03:44+0200",
        "allowAutoJoin": true,
        "projects": [
            {
                "id": 123,
                "name": "Demo",
                "created": "2014-11-11T08:40:51.620Z"
            }
        ]
    }
    ```


### Update Organization [PATCH]

Partial update of organization.

+ Attributes
    + name:POC - Organization name
    + maintainerId - Assign organization to another maintainer
    + allowAutoJoin - Toggle whether superAdmins need approval to join the organization's projects. (default 1)

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token


+ Response 200

    ```js
    {
        "id": 123,
        "name": "POC",
        "created": "2015-10-02T11:03:44+0200",
        "allowAutoJoin": true,
        "projects": [
            {
                "id": 123,
                "name": "Demo",
                "created": "2014-11-11T08:40:51.620Z"
            }
        ]
    }
    ```


### Delete a Organization  [DELETE]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204

## Maintainer Organizations collection [/manage/maintainers/{maintainer_id}/organizations]

+ Parameters
    + maintainer_id: 1 (required, number) - ID of the parent maintainer. Created organization will be assigned to this maintainer.

### Create a Organization [POST]
Create a new organization.

+ Attributes
    + name:POC - Organization name

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 201

    [Organization][]

### List Maintainer's Organizations [GET]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200

    [Organization][]


## Organization users [/manage/organizations/{organization_id}/users]


+ Parameters
    + organization_id: 1 (required, number) - ID of the organization.

### List users [GET]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    [
        {
            "id": 23423,
            "name": "Martin Halamicek",
            "email": "martin@keboola.com"
        }
    ]
    ```

## Add a user [POST]

Either `id` or `email` of member must be set. If member is not found by email, account is created and invitation is sent.

+ Attributes
    + id:7234 - User id
    + email:martin@keboola.com - User email

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204

## Remove a user [DELETE /manage/organizations/{organization_id}/users/{user_id}]

+ Parameters
    + organization_id: 1 (required, number) - ID of the organization.
    + user_id: 1 (required, int) - User id

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204


# Group Projects

## Project [/manage/projects/{project_id}]

+ Model (application/json)

    ```js
    {
      "id": 4088,
      "name": "Martinšík",
      "type": "production",
      "region": "us-east-1",
      "created": "2017-12-11T09:02:13+0100",
      "expires": null,
      "features": [],
      "dataSizeBytes": 22691704832,
      "rowsCount": 4295727047,
      "hasMysql": false,
      "hasRedshift": false,
      "hasSnowflake": true,
      "defaultBackend": "snowflake",
      "hasTryModeOn": "0",
      "limits": {
        "components.jobsParallelism": {
          "name": "components.jobsParallelism",
          "value": 10
        },
        "goodData.dataSizeBytes": {
          "name": "goodData.dataSizeBytes",
          "value": 1000000000
        },
        "goodData.demoTokenEnabled": {
          "name": "goodData.demoTokenEnabled",
          "value": 1
        },
        "goodData.prodTokenEnabled": {
          "name": "goodData.prodTokenEnabled",
          "value": 0
        },
        "goodData.usersCount": {
          "name": "goodData.usersCount",
          "value": 30
        },
        "kbc.adminsCount": {
          "name": "kbc.adminsCount",
          "value": 10
        },
        "kbc.extractorsCount": {
          "name": "kbc.extractorsCount",
          "value": 0
        },
        "kbc.monthlyProjectPowerLimit": {
          "name": "kbc.monthlyProjectPowerLimit",
          "value": 50
        },
        "kbc.writersCount": {
          "name": "kbc.writersCount",
          "value": 0
        },
        "orchestrations.count": {
          "name": "orchestrations.count",
          "value": 10
        },
        "storage.dataSizeBytes": {
          "name": "storage.dataSizeBytes",
          "value": 50000000000
        },
        "storage.jobsParallelism": {
          "name": "storage.jobsParallelism",
          "value": 10
        }
      },
      "metrics": {
        "kbc.adminsCount": {
          "name": "kbc.adminsCount",
          "value": 1
        },
        "orchestrations.count": {
          "name": "orchestrations.count",
          "value": 1
        },
        "storage.dataSizeBytes": {
          "name": "storage.dataSizeBytes",
          "value": 22691704832
        },
        "storage.rowsCount": {
          "name": "storage.rowsCount",
          "value": 4295727047
        }
      },
      "isDisabled": false,
      "billedMonthlyPrice": null,
      "dataRetentionTimeInDays": 7,
      "organization": {
        "id": 5,
        "name": "Martinovo",
        "created": "2013-12-31T11:22:33+0100",
        "allowAutoJoin": true
      },
      "fileStorage": {
        "id": 2,
        "awsKey": "AKIAJ2N244XSWYVVYVLQ",
        "region": "us-east-1",
        "filesBucket": "kbc-sapi-files",
        "owner": "keboola",
        "isDefault": true,
        "created": "",
        "creator": {
          "id": 0,
          "name": null
        }
      },
      "backends": {
        "snowflake": {
          "id": 353,
          "host": "keboola.snowflakecomputing.com",
          "region": "us-east-1"
        }
      }
    }
    ```


### Project Detail [GET]

Returns project with associated limits and metrics.

* limits  - These are limits assigned to project (number of admins, number of orchestrations, parallelization).
* metrics - Latest values of monitored project metrics.


+ Parameters
    + project_id (required, int) - Project id

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200

    [Project][]

### Update Project [PUT]

+ Attributes

    + name: Test - Rename project
    + defaultBackend: snowflake - Change project default backend type
    + type:demo - change project type (demo, production, poc, ...) allowed only for super admin
    + expirationDays: 7 - Change project expiration  - allowed only for super admin
    + billedMonthlyPrice: 2000 - Change project monthly fee - allowed only for super admin
    + dataRetentionTimeInDays: 20 - (snowflake only) Change the data retention period for this project - allowed only for super admin

+ Parameters
    + project_id (required, int) - Project id

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200

    [Project][]

### Delete Project [DELETE]
Project will not be physically deleted. It'll be just not accessible and hidden.

+ Parameters
    + project_id (required, int) - Project id

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204

## Add Project [/manage/organizations/{organization_id}/projects]

Project will be created from default template which defines it's limits.

+ Parameters
    + organization_id (required, int) - Organization id. Project has to be created in some Organization.

### Add Project [POST]

+ Attributes

    + name: My Demo (required) - project name
    + type: demo (required) -  one of `production`, `poc`, `demo`. Default `production`.
    + defaultBackend: snowflake - Project default backend `snowflake` or `redshift`. `snowflake` is default.
    + dataRetentionTimeInDays: 7 - Data retention in days for Time Travel

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 201

     [Project][]

## Move project to another organization [/manage/projects/{project_id}/organizations]

+ Parameters
    + project_id (required, int)  - Project id

### Move project [POST]

+ Attributes

    + organizationId: 523 (required) - ID of destination orgranization

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200

    [Project][]

## Assign project storage backend [/manage/projects/{project_id}/storage-backend]
This action can be performed only by super admin.

One backend connection of each type (snowflake, redshift) can be assigned to project.
Connection type is automatically detected from passed connection identifier.

+ Parameters
    + project_id (required, int)  - Project id

### Assign project storage backend [POST]

+ Attributes

    + storageBackendId: 32 (required) - ID of storage backend

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200

     [Project][]

## Remove project storage backend [/manage/projects/{project_id}/storage-backend/{storage_backend_id}]
This action can be performed only by super admin.

Storage backend type is automatically detected from it's id. Only backend without any buckets associated with them can be removed.


+ Parameters
    + project_id (required, int)  - Project id
    + storage_backend_id (required, int) - Storage backend id. Must be one of storage backends assigned to project.

### Remove project storage backend [DELETE]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200

    [Project][]


## Assign Project File Storage [/manage/projects/{project_id}/file-storage]
This action can be performed only by super admin.

+ Parameters
    + project_id (required, int)  - Project id

### Assign Project File Storage [POST]

+ Attributes

    + fileStorageId: 32 (required) - ID of file storage

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token


+ Response 200

     [Project][]

## Project Limits [/manage/projects/{project_id}/limits]

Change project limits is allowed only form Super Admin.

+ Parameters
    + project_id (required, int)  - Project id

### Set Project Limits [POST]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

    + Body

        ```js
        {
            "limits": [
                {
                    "name": "goodData.usersCount",
                    "value": 23
                }
            ]
        }
        ```

+ Response 200

    [Project][]

## Project Users [/manage/projects/{project_id}/users]

+ Parameters
    + project_id (required, int) - Project id


### List Users [GET]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200

    ```js
    [
        {
            "id": 123,
            "name": "test user",
            "email": "martin@keboola.com",
            "features": [],
            "expires": null,
            "reason": ""
        },
        {
            "id": 124,
            "name": "test user 2",
            "email": "spam@keboola.com",
            "features": [],
            "expires": "2016-03-22 15:01:13",
            "reason": "temporary test"
        }
    ]
    ```

### Add user to project [POST]

An optional expiration (seconds) and reason for joining can be added to the request.

+ Attributes

    + email: martin@keboola.com (required) - Email of invited user
    + expirationSeconds: 3600 (number) - After how many secons the membership of user will expire


+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204

## Delete user from project [/manage/projects/{project_id}/users/{user_id}]

+ Parameters
    + project_id (required, int) - Project id
    + user_id (required, int) - User id

### Delete user from project [DELETE]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204


## Enable/Disable project [/manage/projects/{project_id}/disabled]
+ Parameters
    + project_id (required, int) - Project id

### Change project disabled status [POST]

+ Attributes

    + isDisabled: true (boolean) - Enable or disable project
    + disabledReason: Project mainteintance - Why the project is disabled
    + estimatedEndTime: +1 hour - When the project will be enabled

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200

     [Project][]

## Create Storage token in project [/manage/projects/{project_id}/tokens]

+ Parameters
    + project_id (required, int) - Project id

### Create Storage Token [POST]


+ Attributes

    + description: Test Token (required) - token description
    + canManageBuckets: true (boolean) - Token has full permissions on tabular storage
    + canReadAllFileUploads: true (boolean) - Token has full permissions to files staging
    + expiresIn: 60 (number) - Token lifetime
    + bucketPermissions (object)
        - in.c-main: read

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 201

    ```js
    {
        "id": 3846,
        "token": "TOKEN_VALUE",
        "created":"2013-03-28T13:31:50+0100",
        "description":"martin@keboola.com",
        "isMasterToken":true,
        "canManageBuckets":true,
        "canManageTokens":true,
        "canReadAllFileUploads":true,
        "expires":null,
        "isExpired":false,
        "isDisabled":false,
        "dailyCapacity":0,
        "bucketPermissions": {}
    }
    ```

# Group Deleted Projects

Deleted project operations are allowed only for super admins.

## Deleted project detail [/manage/deleted-projects/{project_id}]

### Deleted project detail [GET]

+ Parameters
    + project_id (required, int) - Deleted project id

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    {
            "id": 101,
            "name": "test project",
            "type": "production",
            "region": "eu-west-1",
            "created": "2017-02-15T14:25:15+0100",
            "expires": null,
            "features": [],
            "dataSizeBytes": 49152,
            "rowsCount": 200,
            "hasMysql": false,
            "hasRedshift": false,
            "hasSnowflake": true,
            "defaultBackend": "snowflake",
            "hasTryModeOn": "0",
            "limits": {},
            "metrics": {},
            "isDisabled": false,
            "billedMonthlyPrice": null,
            "dataRetentionTimeInDays": 1,
            "isPurged": false,
            "isDeleted": true,
            "deletedTime": "2018-02-11T14:25:15+0100",
            "purgedTime": null
    }
    ```


## Purge Deleted Project [/manage/deleted-projects/{project_id}/purge]

### Purge Deleted Project [POST]
Enqueues project full delete command and returns its command execution id for monitoring.

+ Parameters
    + project_id (required, int) - Deleted project id

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

    + Attributes
        + ignoreBackendErrors: `false` (boolean) - ignore errors from backed. eq. deleted Redshift cluter. `false` is default.

+ Response 200 (application/json)

 + Attributes(CommandExecuteResponse)


## List deleted projects [/manage/deleted-projects]

### List deleted projects [GET]

List of deleted projects is allowed only from Super Admin

#### Projects filtering

Projects can be filtered by various filters:

* *organizationId* - organization id
* *name* - name of the project

#### Projects pagination

* *limit* - number of returned projects. Default value: 100
* *offset* - pagination offset

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    [
        {
            "id": 101,
            "name": "test project",
            "type": "production",
            "region": "eu-west-1",
            "created": "2017-02-15T14:25:15+0100",
            "expires": null,
            "features": [],
            "dataSizeBytes": 49152,
            "rowsCount": 200,
            "hasMysql": false,
            "hasRedshift": false,
            "hasSnowflake": true,
            "defaultBackend": "snowflake",
            "hasTryModeOn": "0",
            "limits": {},
            "metrics": {},
            "isDisabled": false,
            "billedMonthlyPrice": null,
            "dataRetentionTimeInDays": 7,
            "isPurged": false,
            "isDeleted": true,
            "deletedTime": "2018-02-11T14:25:15+0100",
            "purgedTime": null,
            "organization": {
                "id": 1,
                "name": "Keboola Tests",
                "created": "",
                "allowAutoJoin": true
            }
        },
        {
            "id": 104,
            "name": "another test project",
            "type": "production",
            "region": "eu-west-1",
            "created": "2017-02-15T14:25:15+0100",
            "expires": null,
            "features": [],
            "dataSizeBytes": 49152,
            "rowsCount": 200,
            "hasMysql": false,
            "hasRedshift": false,
            "hasSnowflake": true,
            "defaultBackend": "snowflake",
            "hasTryModeOn": "0",
            "limits": {},
            "metrics": {},
            "isDisabled": false,
            "billedMonthlyPrice": null,
            "dataRetentionTimeInDays": 7,
            "isPurged": false,
            "isDeleted": true,
            "deletedTime": "2018-02-11T14:25:15+0100",
            "purgedTime": null,
            "organization": {
                "id": 1,
                "name": "Keboola Tests",
                "created": "",
                "allowAutoJoin": true
            }
        }
    ]
    ```

## Cancel project deletion [/manage/deleted-projects/{project_id}{?expirationDays}]

### Cancel project deletion [DELETE]
Cancel of project deletion is allowed only from Super Admin.
If the project has set expiration, expiration is reset on project renew.
You can also specify new expiration by `expirationDays` parameter.

+ Parameters
    + project_id (required, int) - Project id
    + expirationDays (optional, number) - Project expiration in days

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204


# Group Users

Users can be managed only by super admins.

## Manage User [/manage/users/{user_id_or_email}]

### User Detail [GET]

+ Parameters
    + user_id_or_email (required) - User id or email

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token


+ Response 200 (application/json)

    ```js
    {
        "id": 2,
        "name": "Martin Halamicek",
        "email": "martin@keboola.com",
        "features": [
            "inline-manual"
        ]
    }
    ```

### Update User [PUT]

+ Parameters
    + user_id_or_email (required) - User id or email

+ Attributes

    + name: Martin - user name

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token


+ Response 200 (application/json)

    ```js
    {
        "id": 2,
        "name": "Corrected Spelling",
        "email": "spelling@keboola.com",
        "features": [
            "inline-manual"
        ]
    }
    ```

## Disable MFA for User [DELETE /manage/users/{user_id_or_email}/mfa]

+ Parameters
    + user_id_or_email (required) - User id or email

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204


# Group Notifications

List, read and create notifications.
User need super admin rights to create notifications.
There are yet three types of notifications:
 - `common` basic notification for all users in a project
 - `limit` notify project users that some metric of their plan is over quota
 - `global` notify all KBC users about global events


## Notifications [/manage/notifications]

### List Notifications [GET]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token


+ Response 200 (application/json)

    ```js
    [
        {
            "id": "fba2d2de-cb43-11e5-8080-800019c0d40a",
            "type": "common",
            "created": "2016-02-04T13:34:14.966755",
            "isRead": false,
            "isSeen": true,
            "title": "Maintenance Announcement",
            "message": "There will be maintenance on this project sometime in the future",
            "project": {
                "id": "6208",
                "name": "My Project"
            }
        },
        {
            "id": "fae2ad7e-cb43-11e5-8080-800019c0d40a",
            "type": "limit",
            "created": "2016-02-04T13:34:13.707507",
            "isRead": false,
            "isSeen": true,
            "title": "Your project is over quota!",
            "message": "Limit kbc.storageSizeBytes has been crossed",
            "payload": {
                "limit": "kbc.storageSizeBytes"
            },
            "project": {
                "id": "6208",
                "name": "My test"
            }
        }
    ]
    ```

### Create Notification [POST]

+ Attributes

    + type: common (required) - type of notification, one of [common | limit | global]
    + projectId: 234 - required for `common` and `limit` type, ignored for `global`
    + title: First Notification (required) - short title of notification
    + message: Some text - long message, supports markdown
    + payload (object) - optional JSON payload, for type `limit` set to `{"limit": "kbc.limitNameHere"}

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token


+ Response 201 (application/json)

    ```js
    {
        "id": "497bda6a-cb57-11e5-8080-800144cef8df",
        "actor": "Project:1234",
        "type": "common",
        "created": "2016-02-04T15:52:26.011505",
        "title": "Maintenance Announcement",
        "message": "There will be maintenance on this project sometime in the future"
    }
    ```

### Mark Notification as read [PUT]
You can specify either ids of notifications which should be marked as read or you can set `allRead` to mark
all notifications as read.



+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

    + Body

            ```js
            {
                "read": [
                    "497bda6a-cb57-11e5-8080-800144cef8df",
                    "fae2ad7e-cb43-11e5-8080-800019c0d40a"
                ],
                "allRead": true
            }
            ```

+ Response 200 (application/json)
    ```js
    {
        "status": "ok"
    }
    ```


# Group SUPER - Features

## Features [/manage/features?type={type}]

### Retrieve all features [GET]

Gets all features. To filter only features with specific type
add `type` parameter to your query.

+ Parameters
    + type: admin (string) - type of features you want to filter

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    [
        {
            "id": 1,
            "name": "show-new-design",
            "type": "admin",
            "description": "Users with this feature will see new UI",
            "created": "2016-04-28T15:24:51.620Z",
        }
    ]
    ```

### Retrieve one feature [GET /manage/features/{id}]

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    {
        "id": 1,
        "name": "show-new-design",
        "type": "admin",
        "description": "Users with this feature will see new UI",
        "created": "2016-04-28T15:24:51.620Z",
    }
    ```

### Retrieve feature projects [GET /manage/features/{id}/projects]

Get projects with specified feature assigned.

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    [
        {
            "id": 771,
            "name": "Test project"
        }
    ]
    ```

### Retrieve feature users [GET /manage/features/{id}/admins]

Get users with specified feature assigned.

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    [
        {
            "id": 1,
            "name": "Test user",
            "email": "test@example.com"
        }
    ]
    ```

### Create a feature [POST]

To create new feature, provide following parameters as JSON in request body:

+ Attributes

    + name: show-new-design (required) - Feature name
    + type: admin, project (enum) (required) - Feature type
    + description: Users with this feature will see new UI (required)  - Short description of the feature

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 201 (application/json)

    ```js
    {
        "id": 1,
        "name": "show-new-design",
        "type": "admin",
        "description": "Users with this feature will see new UI",
        "created": "2016-04-28T15:24:51.620Z",
    }
    ```

### Delete a feature [DELETE /manage/features/{id}]

+ Parameters
    + id: 1 (required, number) - ID of the feature to delete

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204

## Project Features [/manage/projects/{project_id}/features]

Assign project feature is allowed only for Super Admin.

+ Parameters
    + project_id (required, int)  - Project id

### Add Project feature [POST]

*Note: Feature has to exist before adding to project.*

+ Attributes

    + feature: show-new-design (required) - Feature name

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    {
        "id":259,
        "name":"New Project",
        "features":["new-orchestrator","es-events"],
        "redshift": {
            "connectionId":309,
            "databaseName":"sapi_258"
        }
        "organization": {
            "id": 3432
        },
        "limits": {
            "goodData.usersCount": {
                "name": "goodData.usersCount",
                "value": 23
            }
        }
    }
    ```

### Remove project feature [DELETE /manage/projects/{project_id}/features/{feature_name}]

Remove project feature is allowed only for Super Admin.

+ Parameters
    + project_id (required, int)  - Project id

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204


## User features [/manage/users/{user_id_or_email}/features]


### Add User Feature [POST /manage/users/{user_id_or_email}/features]

*Note: Feature has to exist before adding to user.*

+ Parameters
    + user_id_or_email (required) - User id or email

+ Attributes

    + feature: show-new-design (required) - Feature name

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    {
        "id": 2,
        "name": "Martin Halamicek",
        "email": "martin@keboola.com",
        "features": [
            "inline-manual"
        ]
    }
    ```

### Remove User feature [DELETE /manage/users/{user_id_or_email}/features/{feature}]

+ Parameters
    + user_id_or_email (required) - User id or email
    + feature (required) - feature name

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    {
        "id": 2,
        "name": "Martin Halamicek",
        "email": "martin@keboola.com",
        "features": [
            "inline-manual"
        ]
    }
    ```

## Project Template Features [/manage/project-templates/{template}/features]

These features will be added to project on project creation.

### List Features [GET /manage/project-templates/{template}/features]

Lists Features assigned to project template.

+ Parameters
    + template (required) - StringId of project template

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    [
        {
            "id": 52,
            "name": "test-feature",
            "type": "project",
            "description": "project template test feature",
            "created": "2018-04-12T21:46:37+0200"
        }
    ]
    ```

### Add Feature [POST /manage/project-templates/{template}/features]

*Note: Feature has to exist before adding to project template and has to be of type `project`.*

+ Parameters
    + template (required) - StringId of project template

+ Attributes

    + feature: show-new-design (required) - Feature name

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 201

### Remove Feature [DELETE /manage/project-templates/{template}/features/{feature}]

Removes feature assigned to project template.

+ Parameters
    + template (required) - StringId of project template
    + feature (required) - Feature name

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 204

# Group SUPER - File Storage Management

Management of file storages. File storage is represented by AWS S3 bucket with associated AWS IAM credentials
with full access to this bucket and access to AWS STS service.
At least one file storage have to be registered for one supported region.


## File Storage Collection [/manage/file-storage]

### Create new storage [POST]

New S3 file storage will be registered. Provided AWS credentials are verified and required permissions are validated.
Storage region is automatically detected.

+ Request (application/json)

    + Headers

            X-KBC-ManageApiToken: your_token

    + Attributes(FileStorageRequest)

+ Response 201 (application/json)

    + Attributes(FileStorage)


### List storages [GET]

+ Response 200 (application/json)

    + Attributes (array[FileStorage])

## Region Default File Storage [/manage/file-storage/{file_storage_id}/default]
Each region should have associated one default storage which is associated to new project in region.
Only storage owned by **keboola** can be set as default.

+ Parameters
    + file_storage_id (required) - File Storage id

### Set storage as default [POST]

+ Request (application/json)

    + Headers

            X-KBC-ManageApiToken: your_token


+ Response 201 (application/json)

    + Attributes(FileStorage)

## Data Structures

### FileStorageBase

+ awsKey: SFASDF (required)
+ filesBucket: `kbc-sapi-files` (required)
+ owner: keboola (required) - Associated AWS account owner.

### FileStorage(FileStorageBase)

+ id: 123 (required)
+ region: `us-east-1` (required)
+ isDefault: false

## FileStorageRequest(FileStorageBase)

+ awsSecret: xxxx (required)


# Group SUPER - Storage Backends Management
Storage backends powers Keboola Connection bucket and tables the main tabular data storage.
Currently supported backends are:

- Redshift
- Snowflake

## Storage Backend Collection [/manage/storage-backend]

### Create New Backend [POST]

#### Redshift

Credentials with superuser access to database must be provided for Redshift.


#### Snowflake

Credentials and storage warehouse are required. You can generate user, role and warehouse with following queries:

```
CREATE ROLE "KEBOOLA_STORAGE";
GRANT CREATE DATABASE ON ACCOUNT TO ROLE "KEBOOLA_STORAGE";
GRANT CREATE ROLE ON ACCOUNT TO ROLE "KEBOOLA_STORAGE" WITH GRANT OPTION;
GRANT CREATE USER ON ACCOUNT TO ROLE "KEBOOLA_STORAGE" WITH GRANT OPTION;
CREATE WAREHOUSE "YOUR_WAREHOUSE" WITH WAREHOUSE_SIZE = 'XSMALL' WAREHOUSE_TYPE = 'STANDARD' AUTO_SUSPEND = 3600 AUTO_RESUME = TRUE;
GRANT USAGE ON WAREHOUSE "YOUR_WAREHOUSE" TO ROLE "KEBOOLA_STORAGE" WITH GRANT OPTION;

CREATE USER "KEBOOLA_STORAGE"
PASSWORD = "YOUR_PASSWORD"
DEFAULT_ROLE = "KEBOOLA_STORAGE";

GRANT ROLE "KEBOOLA_STORAGE" TO USER "KEBOOLA_STORAGE";
GRANT ROLE "KEBOOLA_STORAGE" TO ROLE SYSADMIN;
```

According to previous example parameter for storage create will be:

- `user` - `KEBOOLA_STORAGE`
- `warehouse` - `YOUR_WAREHOUSE`
- `password` - `YOUR_PASSWORD`


+ Request (application/json)

    + Headers

            X-KBC-ManageApiToken: your_token

    + Attributes(StorageBackendCreate)

+ Response 201 (application/json)

    + Attributes(StorageBackend)

### List Backends [GET]

+ Response 200 (application/json)

    + Attributes (array[StorageBackend])


## Data Structures

### StorageBackendCreate

+ backend: snowflake (required) - can be redshift or snowflake
+ host: `sapi-37-demo.cmizbsfmzc6w.us-east-1.redshift.amazonaws.com` (required)
+ warehouse: `production` - required only for snowflake.
+ username: keboola (required)
+ password: 1234 (required)
+ region: `us-east-1` (required)
+ owner: keboola (required) - Associated AWS account owner.

## StorageBackend

+ id: 123 (required)
+ backend: redshift (required)
+ host: sapi-37-demo.cmizbsfmzc6w.us-east-1.redshift.amazonaws.com (required)
+ username: keboola (required)
+ password: 1234 (required)
+ owner: keboola (required)


# Group SUPER - Commands

## Run Command [POST /manage/commands]

Execute Keboola Connection cli command asynchronously. Command is enqued to commands queue, `commandExecutionId` is returned.
You can use this id for search of command output in papertrail logs.


+ Request (application/json)

    + Headers

            X-KBC-ManageApiToken: your_token

    + Attributes(CommandExecute)

+ Response 201 (application/json)

    + Attributes(CommandExecuteResponse)

## Data Structures

### CommandExecute

+ command: `storage:workers\-list` (required) - command to execute
+ parameters: `--help`, 23 (array[string]) - command parameters

## CommandExecuteResponse

+ commandExecutionId: `123\-abcd` (required) - id of execution, this id is appended to all logs provided by command



# Group SUPER - UI Management

## List Applications [GET /manage/ui-apps]

Returns active manage applications. This resources doesn't require authentication.


+ Request (application/json)

    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    [
        {
            "id": "kbc.manageApps",
            "name": "kbc.manageApps",
            "version": "0.0.3-33-ga6bc947",
            "basePath": "https:\/\/kbc-uis.s3.amazonaws.com\/kbc.manageApps\/0.0.3-33-ga6bc947\/",
            "scripts": [
                "https:\/\/kbc-uis.s3.amazonaws.com\/kbc.manageApps\/0.0.3-33-ga6bc947\/scripts\/libs.js",
                "https:\/\/kbc-uis.s3.amazonaws.com\/kbc.manageApps\/0.0.3-33-ga6bc947\/scripts\/scripts.js"
            ],
            "styles": [
                "https:\/\/kbc-uis.s3.amazonaws.com\/kbc.manageApps\/0.0.3-33-ga6bc947\/styles\/libs.css",
                "https:\/\/kbc-uis.s3.amazonaws.com\/kbc.manageApps\/0.0.3-33-ga6bc947\/styles\/select2.png"
            ]
        }
    ]
    ```

## Get Application detail [GET /manage/ui-apps/{app_id}]
Retrieve application detail with all it's versions.

+ Parameters
    + app_id (required, id) - Application id

+ Request (application/json)

    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    [
        {
            "id":"41",
            "stringId":"kbc",
            "name":"kbc",
            "created":"2015-02-12 11:10:09",
            "versions":[
                {
                    "id":1646,
                    "created":"2015-08-17 17:43:37",
                    "version":"0.1.21-17-g3cae4c0",
                    "isActive":true,
                    "buildUrl":""
                }
            ]
        }
    ]
    ```

## Activate/Deactivate application version [PATCH /manage/ui-apps-versions/{version_id}]

+ Attributes
    + isActive: true (required, boolean) - active state of version. Only one version of app can be active, previous active version will be disabled.

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    {
        "id":1646,
        "created":"2015-08-17 17:43:37",
        "version":"0.1.21-17-g3cae4c0",
        "isActive":true,
        "buildUrl":""
    }
    ```

## Register new Application/Version [POST /manage/ui-apps?{manifest_url,activate}]

+ Parameters
    + manifest_url (required, string) - URL of manifest describing UI build
    + activate (optional, int) - Activate version after registration

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 201 (application/json)

    ```js
    {
        "app": {
            "id":"41",
            "stringId":"kbc",
            "name":"kbc",
            "created":"2015-02-12 11:10:09"
        },
        "verion": {
            "id":1646,
            "created":"2015-08-17 17:43:37",
            "version":"0.1.21-17-g3cae4c0",
            "isActive":true
        }
    }
    ```

# Group Syrup API integration

This s a example of API call returning all running worker processes and it's state. This resource is accessible for tokens of type `super` with `super_monitoring`  scope.
`Super` tokens can be created only by super admins.


## Authentication
Syrup API will receive management token in header and will use it to call `Verify token` api call.
Details about token will be returned, scopes associated to token are present in response.
If scope  `super_monitoring` and token type is `super` syrup will return workers response, otherwise 403 is returned.

# Get workers [GET /queue/workers]
Endpoint should be: https://syrup.keboola.com/queue/workers

This API resource can be used for example by Hubot script for listing running workers.

+ Request (application/json)
    + Headers

            X-KBC-ManageApiToken: your_token

+ Response 200 (application/json)

    ```js
    [
        {
            "id": 1,
            "host": "kbc-vpc-syrup-tapi-worker-a-01",
            "queue": "tapi",
            "instance": "1",
            "pid": 2516,
            "lastChanged": "2015-08-12 11:59:04",
            "status": "processing",
            "jobId": 234234,
            "project": {
                "id": 234,
                "name": "Shared Config"
            }
        },
        {
            "id": 1,
            "host": "kbc-vpc-syrup-tapi-worker-a-01",
            "queue": "tapi",
            "instance": "1",
            "pid": 2516,
            "lastChanged": "2015-08-12 11:59:04",
            "status"": "idle"
        },
    ]
    ````
